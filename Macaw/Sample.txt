//
//  Macaw.swift
//  Macaw
//
//  Created by Mac Mini on 1/18/17.
//  Copyright Â© 2017 Armonia. All rights reserved.
//

import Cocoa
import Foundation

class Macaw {
    var textView : NSTextView

    struct color {
        static let normal     = NSColor.black
        static let comment    = NSColor.green
        static let keyword    = NSColor.magenta
        static let identifier = NSColor.purple
        static let symbol     = NSColor.orange
        static let type       = NSColor.cyan
        static let literal    = NSColor.red
    }

    struct regex {
        static let keywords      = "\\b(class|func|enum|struct)\\b"
        static let types         = "\\b(let|var|import)\\b"
        static let commentLine   = "(//.*$)"
        static let commentBlock  = "(/*.*\\*/)"
        static let stringLiteral = "(\".*\")"
        static let numberLiteral = "\\b(d+)\\b"
        static let symbols       = "(\\+|-|\\*|/|=|\\{|\\}|\\[|\\]|\\(|\\))"
    }

    let patterns = [
        regex.keywords      : color.keyword,
        regex.types         : color.type,
        regex.commentLine   : color.comment,
        regex.stringLiteral : color.literal,
        regex.numberLiteral : color.literal
    ]

    init(_ textView: NSTextView) {
        self.textView = textView
    }

    func colorize() {
        let all = textView.string ?? ""
        let range = NSString(string: textView.string!).range(of: all)
        colorize(range)
    }

    func colorize(_ range: NSRange) {
        var extended = NSUnionRange(range, NSString(string: textView.string!).lineRange(for: NSMakeRange(range.location, 0)))
        extended = NSUnionRange(range, NSString(string: textView.string!).lineRange(for: NSMakeRange(NSMaxRange(range), 0)))

        for (pattern, attribute) in patterns {
            applyStyles(extended, pattern, attribute)
        }
    }

    func applyStyles(_ range: NSRange, _ pattern: String, _ attribute: [String: Any]) {
        let regex = try? NSRegularExpression(pattern: pattern, options: [])
        regex?.enumerateMatches(in: textView.string!, options: [], range: range) {
            match, flags, stop in

            let matchRange = match?.rangeAt(1)
            self.textView.textStorage?.addAttributes(attribute, range: matchRange!)
            let maxRange = matchRange!.location + matchRange!.length

            if maxRange + 1 < (self.textView.textStorage?.length)! {
                self.textView.textStorage?.addAttributes(color.normal, range: NSMakeRange(maxRange, 1))
            }
        }
    }
}


// End
